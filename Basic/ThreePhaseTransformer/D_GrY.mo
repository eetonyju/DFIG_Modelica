
within DFIG_Modelica.Basic.ThreePhaseTransformer;

model D_GrY
        extends Interfaces.SixPort;
        parameter Real N1 = 0.1;
        parameter Real N2 = 0.1;
        parameter Real Vb = 0.1 "kV";
        parameter Real Sb = 0.1 "kVA";
        parameter Real Rp = 0.1 "%";
        parameter Real Xp = 0.1 "%";
        Real k;
        Real R;
        Real X;
        Real vaRe;
        //brach voltage
        Real vbRe;
        Real vcRe;
        Real vaIm;
        //brach voltage
        Real vbIm;
        Real vcIm;
        Real vnodeaRe;
        Real vnodebRe;
        Real vnodecRe;
        Real vnodeaIm;
        Real vnodebIm;
        Real vnodecIm;
        Real vARe;
        //right side branch voltage
        Real vBRe;
        Real vCRe;
        Real vAIm;
        Real vBIm;
        Real vCIm;
        Real iaRe;
        Real ibRe;
        Real icRe;
        Real iaIm;
        Real ibIm;
        Real icIm;
        Real iARe;
        Real iBRe;
        Real iCRe;
        Real iAIm;
        Real iBIm;
        Real iCIm;
        Real UZRea;
        //Zbranch voltage
        Real UZReb;
        Real UZRec;
        Real UZIma;
        Real UZImb;
        Real UZImc;
      equation
        k = N2 / N1;
        R = Vb * Vb * 1000 / Sb * Rp;
        X = Vb * Vb * 1000 / Sb * Xp;
        pa.vRe - pb.vRe = vaRe;
        pb.vRe - pc.vRe = vbRe;
        pc.vRe - pa.vRe = vcRe;
        pa.vIm - pb.vIm = vaIm;
        pb.vIm - pc.vIm = vbIm;
        pc.vIm - pa.vIm = vcIm;
        vARe = vnodeaRe - 0;
        vBRe = vnodebRe - 0;
        vCRe = vnodecRe - 0;
        vAIm = vnodeaIm - 0;
        vBIm = vnodebIm - 0;
        vCIm = vnodecIm - 0;
        vARe = k * vaRe;
        vBRe = k * vbRe;
        vCRe = k * vcRe;
        vAIm = k * vaIm;
        vBIm = k * vbIm;
        vCIm = k * vcIm;
        iaRe = pa.iRe + icRe;
        ibRe = pb.iRe + iaRe;
        icRe = pc.iRe + ibRe;
        iaIm = pa.iIm + icIm;
        ibIm = pb.iIm + iaIm;
        icIm = pc.iIm + ibIm;
        iARe = na.iRe;
        iBRe = nb.iRe;
        iCRe = nc.iRe;
        iAIm = na.iIm;
        iBIm = nb.iIm;
        iCIm = nc.iIm;
        iaRe = -k * iARe;
        ibRe = -k * iBRe;
        icRe = -k * iCRe;
        iaIm = -k * iAIm;
        ibIm = -k * iBIm;
        icIm = -k * iCIm;
        UZRea = na.vRe - vnodeaRe;
        UZReb = nb.vRe - vnodebRe;
        UZRec = nc.vRe - vnodecRe;
        UZIma = na.vIm - vnodeaIm;
        UZImb = nb.vIm - vnodebIm;
        UZImc = nc.vIm - vnodecIm;
        UZRea = R * iARe - X * iAIm;
        UZIma = R * iAIm + X * iARe;
        UZReb = R * iBRe - X * iBIm;
        UZImb = R * iBIm + X * iBRe;
        UZRec = R * iCRe - X * iCIm;
        UZImc = R * iCIm + X * iCRe;
        annotation(Icon(graphics = {Text(origin = {-71, 61}, extent = {{-11, 17}, {11, -17}}, textString = "A", fontSize = 50), Ellipse(origin = {-13, -6}, extent = {{-29, 54}, {27, -54}}, endAngle = 360), Ellipse(origin = {34, -6}, extent = {{-28, 56}, {28, -56}}, endAngle = 360), Text(origin = {10, -6}, extent = {{-14, 22}, {14, -22}}, textString = "D GrY", fontSize = 120)}, coordinateSystem(initialScale = 0.1)));
      end D_GrY;